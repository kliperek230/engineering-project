// <auto-generated />
using System;
using FoodMateApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodMateApp.Migrations
{
    [DbContext(typeof(FOODMATEContext))]
    partial class FOODMATEContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FoodMateApp.Models.Lifts", b =>
                {
                    b.Property<int>("LiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lift_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LiftName")
                        .IsRequired()
                        .HasColumnName("lift_name")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<DateTime>("MDate")
                        .HasColumnName("m_date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnName("value")
                        .HasColumnType("int");

                    b.HasKey("LiftId")
                        .HasName("PK__lifts__D9C8A289337D7016");

                    b.HasIndex("UserId");

                    b.ToTable("Lifts");
                });

            modelBuilder.Entity("FoodMateApp.Models.Meals", b =>
                {
                    b.Property<int>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("meal_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("MDate")
                        .HasColumnName("m_date")
                        .HasColumnType("date");

                    b.Property<int?>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.HasKey("MealId")
                        .HasName("PK__meals__2910B00F78701AE6");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("FoodMateApp.Models.Measurements", b =>
                {
                    b.Property<int>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("measurement_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Butt")
                        .HasColumnName("butt")
                        .HasColumnType("int");

                    b.Property<int?>("Chest")
                        .HasColumnName("chest")
                        .HasColumnType("int");

                    b.Property<int?>("LArm")
                        .HasColumnName("l_arm")
                        .HasColumnType("int");

                    b.Property<int?>("LCalve")
                        .HasColumnName("l_calve")
                        .HasColumnType("int");

                    b.Property<int?>("LForearm")
                        .HasColumnName("l_forearm")
                        .HasColumnType("int");

                    b.Property<int?>("LThigh")
                        .HasColumnName("l_thigh")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MDate")
                        .HasColumnName("m_date")
                        .HasColumnType("date");

                    b.Property<int?>("RArm")
                        .HasColumnName("r_arm")
                        .HasColumnType("int");

                    b.Property<int?>("RCalve")
                        .HasColumnName("r_calve")
                        .HasColumnType("int");

                    b.Property<int?>("RForearm")
                        .HasColumnName("r_forearm")
                        .HasColumnType("int");

                    b.Property<int?>("RThigh")
                        .HasColumnName("r_thigh")
                        .HasColumnType("int");

                    b.Property<int?>("UWeight")
                        .HasColumnName("u_weight")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("int");

                    b.Property<int?>("Waist")
                        .HasColumnName("waist")
                        .HasColumnType("int");

                    b.HasKey("MeasurementId")
                        .HasName("PK__measurem__E3D1E1C1D6C54877");

                    b.HasIndex("UserId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("FoodMateApp.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Carbs")
                        .HasColumnName("carbs")
                        .HasColumnType("float");

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<double?>("Fats")
                        .HasColumnName("fats")
                        .HasColumnType("float");

                    b.Property<double?>("Kcal")
                        .HasColumnName("kcal")
                        .HasColumnType("float");

                    b.Property<string>("ProductNameEng")
                        .HasColumnName("product_name_eng")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ProductNamePl")
                        .HasColumnName("product_name_pl")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("Protein")
                        .HasColumnName("protein")
                        .HasColumnType("float");

                    b.HasKey("ProductId")
                        .HasName("PK__products__47027DF5F1DA5EBE");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FoodMateApp.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Bench")
                        .HasColumnName("bench")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date")
                        .HasColumnType("date");

                    b.Property<double?>("Carbs")
                        .HasColumnName("carbs")
                        .HasColumnType("float");

                    b.Property<int?>("Deadlift")
                        .HasColumnName("deadlift")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("Fats")
                        .HasColumnName("fats")
                        .HasColumnType("float");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<double?>("Kcal")
                        .HasColumnName("kcal")
                        .HasColumnType("float");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("Measurements")
                        .HasColumnName("measurements")
                        .HasColumnType("int");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnName("nickname")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("Ohp")
                        .HasColumnName("ohp")
                        .HasColumnType("int");

                    b.Property<double?>("Protein")
                        .HasColumnName("protein")
                        .HasColumnType("float");

                    b.Property<string>("Pswd")
                        .HasColumnName("pswd")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnName("sex")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<int?>("Squat")
                        .HasColumnName("squat")
                        .HasColumnType("int");

                    b.Property<int>("UHeight")
                        .HasColumnName("u_height")
                        .HasColumnType("int");

                    b.Property<string>("UType")
                        .HasColumnName("u_type")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("UWeight")
                        .HasColumnName("u_weight")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK__users__B9BE370F38AA58BF");

                    b.HasIndex("Bench");

                    b.HasIndex("Deadlift");

                    b.HasIndex("Measurements");

                    b.HasIndex("Ohp");

                    b.HasIndex("Squat");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FoodMateApp.Models.Lifts", b =>
                {
                    b.HasOne("FoodMateApp.Models.Users", "User")
                        .WithMany("Lifts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__lifts__user_id__5441852A")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodMateApp.Models.Meals", b =>
                {
                    b.HasOne("FoodMateApp.Models.Products", "Product")
                        .WithMany("Meals")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__meals__product_i__6A30C649");

                    b.HasOne("FoodMateApp.Models.Users", "User")
                        .WithMany("Meals")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__meals__user_id__693CA210")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodMateApp.Models.Measurements", b =>
                {
                    b.HasOne("FoodMateApp.Models.Users", "User")
                        .WithMany("MeasurementsNavigation")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__measureme__user___4D94879B")
                        .IsRequired();
                });

            modelBuilder.Entity("FoodMateApp.Models.Users", b =>
                {
                    b.HasOne("FoodMateApp.Models.Lifts", "BenchNavigation")
                        .WithMany("UsersBenchNavigation")
                        .HasForeignKey("Bench")
                        .HasConstraintName("FK__users__bench__5629CD9C");

                    b.HasOne("FoodMateApp.Models.Lifts", "DeadliftNavigation")
                        .WithMany("UsersDeadliftNavigation")
                        .HasForeignKey("Deadlift")
                        .HasConstraintName("FK__users__deadlift__59063A47");

                    b.HasOne("FoodMateApp.Models.Measurements", "Measurements1")
                        .WithMany("Users")
                        .HasForeignKey("Measurements")
                        .HasConstraintName("FK__users__measureme__5535A963");

                    b.HasOne("FoodMateApp.Models.Lifts", "OhpNavigation")
                        .WithMany("UsersOhpNavigation")
                        .HasForeignKey("Ohp")
                        .HasConstraintName("FK__users__ohp__571DF1D5");

                    b.HasOne("FoodMateApp.Models.Lifts", "SquatNavigation")
                        .WithMany("UsersSquatNavigation")
                        .HasForeignKey("Squat")
                        .HasConstraintName("FK__users__squat__5812160E");
                });
#pragma warning restore 612, 618
        }
    }
}
